package jpp.infinityloop.adapter;

/**
 * Adapter Interface for JUnit tests
 * @param <T> Type of the board representation to be tested by the JUnit tests.
 */
public interface ITestAdapter<T> {
    /**
     * Decodes a new board from the given raw data.
     * @param data the raw data like it would be read by an InputStream
     * @return the board defined in data
     * @throws IllegalArgumentException if data is not a valid binary representation
     */
    T decode(byte[] data);

    /**
     * Encodes a given board to the binary format so it could be processed by an OutputStream
     * @param board the board to be saved
     * @return the binary representation of board
     */
    byte[] encode(T board);

    /**
     * Tries to solve the given board.
     * @param board the board to be solved
     * @return true if and only if the board could be solved
     */
    boolean solve(T board);

    /**
     * Initiates the board generator
     * @param minWidth minimal width of a board generated by this generator
     * @param maxWidth  maximal width of a board generated by this generator
     * @param minHeight minimal height of a board generated by this generator
     * @param maxHeight maximal height of a board generated by this generator
     */
    void initGenerator(int minWidth, int maxWidth, int minHeight, int maxHeight);

    /**
     * Generates a new board using a board generator.
     * @return the new board
     * @throws IllegalStateException if no generator has been defined
     */
    T generate();

    /**
     * Rotates the tile at the specified position on the given board by 90 degrees clockwise.
     * @param board the board where the rotation should take place
     * @param column the column of the rotated tile (zero indexed)
     * @param row the row of the rotated tile (zero indexed)
     */
    void rotate(T board, int column, int row);
}
